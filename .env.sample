
REDIS_BULL_DB=redis://127.0.0.1:6379

# Bull redis queue name that receives the events jobs
REDIS_BULL_EVENTS_QUEUNAME="event-track"

# Clickhouse db that gonna receive the events,
#  where tables will be created and filled with your events:
DESTINATION_CLICKHOUSE_DB="http://localhost:8123"
DESTINATION_CLICKHOUSE_DB_NAME=events_bull
DESTINATION_CLICKHOUSE_DB_USER=
DESTINATION_CLICKHOUSE_DB_PW=

# Redis `job.data` property used to specify the type of the event 
#  (be aware that the type of the event is the Clickhouse table name)
# By default, this property is `event_type`: 
# The possible values for this key are: 
#  "clickhouse_table", "event_type", "__event_type"
#
# Example of a `job.data` single enqueued event payload:
#  { 
#     "event_type": "<event_clickhouse_table_name>", 
#     ...Rest of the column-values of the event
#  }
REDIS_JOB_EVENT_TYPE_PROPERTY="event_type"

# Repeat interval for the push of the events to the Clickhouse tables
BULK_REPEAT_INTERVAL_SEC=5

# Maximum number of events we gonna INSERT into the according destination table, 
#  on each repeat interval.
TAKE_UP_TO_PER_BATCH=100

# We can accept more than `TAKE_UP_TO_PER_BATCH` in the bulker, if we 
#  dont want to keep too much events in our redis queue.
# But if we keep to much events events in the bulker, and if the bulker
#  encounter a down / crash, then we can loose events because they are not
#  in the redis queue anymore.
# So be careful with a too big value of this:
# By default, BULKER_MAX_LENGTH == TAKE_UP_TO_PER_BATCH
BULKER_MAX_LENGTH=100

# Use Clickhouse async_insert + wait_for_async_insert 
# https://clickhouse.com/docs/optimize/asynchronous-inserts#enabling-asynchronous-inserts
USE_CLICKHOUSE_ASYNC_INSERT=1

# Set to 1 if you want the new columns on existing tables are set to NULL (Nullable) or not
CLICKHOUSE_NEW_COL_NULLABLE=0

# In the corner case you want to re-enqueue old Bull events you would have:
# In some old Bull version, we had Bull events with the name "main" instead of "__default__"
#  and these events had the particularity to be set with a timestamp in sec instead of ms,
#  which is critical and cause mis-delaying of the jobs.
# In case you set RE_ENQUEUE_OLD_BULL_EVENTS to 1, we automatically re-enqueue such events:
RE_ENQUEUE_OLD_BULL_EVENTS=1
RE_ENQUEUE_OLD_BULL_EVENTS_JOBNAME="main"